install.packages("RMySQL", type="source")
install.packages("RMySQL", type="source")
install.packages("RMySQL", type="source")
install.packages("RMySQL", type="source")
Sys.getenv("MYSQL_HOME")
Sys.getenv("R_HOME")
Sys.getenv("PATH")
install.packages("RMySQL", type="source")
install.packages("RMySQL", type="source")
install.packages("RMySQL", type="source")
install.packages("RMySQL", type="source")
Sys.getenv("MYSQL_HOME")
install.packages("RMySQL", type="source")
Sys.getenv("MYSQL_HOME")
Sys.getenv("MYSQL_HOME")
install.packages("RMySQL", type="source")
library(RMySQL)
library(RMySQL)
library(RMySQL)
library(RMySQL)
Sys.getenv("MYSQL_HOME")
library(RMySQL)
host="genome-mysql.cse.ucsc.edu")
ucscDb <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb);
result
hg19 <- dbConnect(MySQL(),user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
library(rhdf5)
library(XML)
library(RMySQL)
library(RMySQL)
library(httr)
oauth_endpoints("github")
install.packages("Rcpp")
library(Rcpp)
install.packages("httpuv")
install.packages("jsonlite")
library(jsonlite)
install.packages("jsonlite", repos="http://cran.r-project.org")
library(jsonlite)
library(jsonlite)
library(ggvis)
library(jsonlite)
library(jsonlite)
install.packages("jsonlite", repos="http://cran.r-project.org")
install.packages("httpuv")
library(jsonlite)
install.packages("httpuv")
library(httpuv)
install.packages("sqldf")
library(sqldf)
acs <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"")
acs <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
acs
str(acs)
test1 <- sqldf("select pwgtp1 from acs where AGEP < 50")
test1
test1[1:100]
str(test1)
str(acs)
head(acs)
test1 <- sqldf("select pwgtp1,agep from acs where AGEP < 50")
head(test1)
tail(test1)
unique(acs$AGEP)
test2 <- sqldf("select unique * from acs")
test2 <- sqldf("select distinct AGEP from acs")
test2
test2 <- sqldf("select distinct pwgtp1 from acs")
test2
test2 <-  sqldf("select AGEP where unique from acs")
test2 <- sqldf("select distinct pwgtp1 from acs")
head(test2)
test2 <- sqldf("select distinct AGEP from acs")
head(test2)
test2
unique(acs$AGEP)
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
con
htmlCode = readLines(con)
htmlCode
str(htmlCode)
head(htmlCode)
htmlCode(10)
htmlCode[10]
htmlCode[1:10]
?nchar
nchar(htmlCode[10])
nchar(htmlCode[20])
nchar(htmlCode[30])
nchar(htmlCode[100])
?as.POSIXct
?plot
?legend
library(lattice)
search()
library(datasets)
xplot(Ozond ~ Wind, data = airquality)
xyplot(Ozond ~ Wind, data = airquality)
xyplot(Ozone ~ Wind, data = airquality)
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1))
set.seed(10)
x <- rnorm(100)
f <- rep(0:1, each=50)
y <- x + f - f * x + rnorm(100, sd = 0.5)
f <- factor (f, labels = c("Group 1", "Group 2"))
xyplot (y ~ x | f, layout = c(2,1))
f
f <- rep(0:1, each=50)
rep(0:1, each=50)
library(ggplot2)
str(mpg)
gplot(displ ~ hwy, data=mpg)
qplot(displ ~ hwy, data=mpg)
qplot(displ, hwy, data=mpg)
?qplot
qplot(displ, hwy, data=mpg, color = drv)
qplot(displ, hwy, data=mpg, color = manufacturer)
qplot(displ, hwy, data=mpg, geom = c("point", "smooth"))
qplot(displ, hwy, data=mpg, geom = c("point"))
qplot(displ, hwy, data=mpg)
qplot(displ, hwy, data=mpg, geom = c("point"))
qplot(hwy, fill = drv)
qplot(hwy, data=mpg, fill = drv)
qplot(displ, hwy, data=mpg, facets = .~drv)
p <- ggplot(mtcars2)
library(mtcars2)
library(datasets)
p <- ggplot(mtcars2)
library(ggplot2)
p <- ggplot(mtcars2)
head(mtcars2)
search()
datasets
?datasets
library(help = "datasets")
head(mtcars)
p <- ggplot(mtcars)
p
p + geom_point()
p + geom_point(aes(x=disp, y = mpg))
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
BodyWeight
?panel
?llines
??panel
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
?splom
?par
?trellis.par.set
?splom
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
g <- ggplot(movies, aes(votes, rating))
print(g)
g
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) +geom_smooth()
install.packages("Quandl")
mydata = Quandl("FRED/GDP")
library(Quandl)
mydata = Quandl("FRED/GDP")
Quandl.auth("G5xW3q6kgbALQ8L2srWD")
mydata = Quandl("FRED/GDP")
View(mydata)
?Quandl
mydata = Quandl("GOOG/NASDAQ_AAPL")
View(mydata)
bitcoin_USD = Quandl("BAVERAGE/USD")
View(bitcoin_USD)
oil <- Quandl("OPEC/ORB")
View(oil)
View(bitcoin_USD)
stock_AAPL = Quandl("GOOG/NASDAQ_AAPL")[,c(1,5)]
View(stock_AAPL)
stock_AAPL = Quandl("GOOG/NASDAQ_AAPL")[,c("Date","Close")]
View(stock_AAPL)
stock_AAPL = Quandl("GOOG/NASDAQ_AAPL")
View(stock_AAPL)
# stock_AAPL = Quandl("GOOG/NASDAQ_AAPL")[,c("Date","Close","Open")]
stock_AAPL = Quandl("GOOG/NASDAQ_AAPL")[,c("Date","Close","Open")]
View(stock_AAPL)
library(ggplot2)
?merge
mergeData <- merge(stock_AAPL, oil, by.x = "Date", by.y = "Date")
View(mergeData)
stock_AAPL = Quandl("GOOG/NASDAQ_AAPL", start_date="2010-01-01")[,c("Date","Close")]
View(stock_AAPL)
oil <- Quandl("OPEC/ORB", start_date="2010-01-01")
View(oil)
mergeData <- merge(stock_AAPL, oil, by.x = "Date", by.y = "Date")
View(mergeData)
ggplot(mergeData, aes(x=Date,y=Close))
ggplot(mergeData, aes(x=Date,y=Close)) + geom_line()
ggplot(mergeData, aes(x=Date)) +
geom_line(aes(y=Close)) +
geom_line(aes(y=Value))
ggplot(mergeData, aes(x=Date)) +
geom_line(aes(y=Close), color="red") +
geom_line(aes(y=Value), color="black")
?Quandl.auth
Quandl.auth()
ggplot(mergeData, aes(x=Date)) +
geom_line(aes(y=Close), color="red") +
geom_line(aes(y=Value), color="black")
stock_AAPL <- Quandl("GOOG/NASDAQ_AAPL", start_date="2010-01-01")[,c("Date","Close")]
oil <- Quandl("OPEC/ORB", start_date="2010-01-01", authcode = Quandl.auth("G5xW3q6kgbALQ8L2srWD"))
?library
stock_AAPL <- Quandl("GOOG/NASDAQ_AAPL", start_date="2010-01-01")[,c("Date","Close")]
View(stock_AAPL)
oil <- Quandl("OPEC/ORB", start_date="2010-01-01", authcode = Quandl.auth("G5xW3q6kgbALQ8L2srWD"))
mergeData <- merge(stock_AAPL, oil, by.x = "Date", by.y = "Date")
View(mergeData)
ggplot(mergeData, aes(x=Date)) +
geom_line(aes(y=Close), color="red") +
geom_line(aes(y=Value), color="black")
?rnorm
mean <- .1/250
vol <- .20/sqrt(250)
r <- rnorm(100, mean, vol)
r
price.0 <- 1000
?cumsum
price.0 <- 1000
mean <- .1/250
vol <- .20/sqrt(250)
r <- rnorm(100, mean, vol)
logPrice <- log(price.0) + cumsum(r)
logPrice
Prices < exp(logPrice)
?log
Prices <- exp(logPrice)
Prices
price.0 <- 1000
mean <- 0/250
vol <- .20/sqrt(250)
r <- rnorm(100, mean, vol)
logPrice <- log(price.0) + cumsum(r)
Prices <- exp(logPrice)
Prices
library(ggplot2)
ggplot(Prices)
?ggplot
plot(Prices)
plot(Prices, type="l")
price0 <- 1000
mean <- 0/250
vol <- .20/sqrt(250)
r <- rnorm(100, mean, vol)
logPrice <- log(price0) + cumsum(r)
Prices <- exp(logPrice)
plot(Prices, type="l")
price0 <- 1000
mean <- .1/250
vol <- .20/sqrt(250)
r <- rnorm(100, mean, vol)
logPrice <- log(price0) + cumsum(r)
Prices <- exp(logPrice)
plot(Prices, type="l")
price0 <- 1000
mean <- .1/250
vol <- .20/sqrt(250)
r <- rnorm(100, mean, vol)
logPrice <- log(price0) + cumsum(r)
Prices <- exp(logPrice)
plot(Prices, type="l")
price0 <- 1000
mean <- .1/250
vol <- .20/sqrt(250)
r <- rnorm(100, mean, vol)
logPrice <- log(price0) + cumsum(r)
Prices <- exp(logPrice)
plot(Prices, type="l")
price0 <- 1000
mean <- .1/250
vol <- .20/sqrt(250)
r <- rnorm(100, mean, vol)
logPrice <- log(price0) + cumsum(r)
Prices <- exp(logPrice)
plot(Prices, type="l")
price0 <- 1000
mean <- .1/250
vol <- .20/sqrt(250)
r <- rnorm(100, mean, vol)
logPrice <- log(price0) + cumsum(r)
Prices <- exp(logPrice)
plot(Prices, type="l")
price0 <- 1000
mean <- .1/250
vol <- .20/sqrt(250)
r <- rnorm(100, mean, vol)
logPrice <- log(price0) + cumsum(r)
Prices <- exp(logPrice)
plot(Prices, type="l")
library(ggplot2)
# initial price
price0 <- 1000
# annual drift and volatility
mu <- .1
sigma <- .20
t <- 250
mu.daily <- mu/t
sigma.daily <- simga/sqrt(t)
r <- rnorm(100, mu.daily, simga.daily)
logPrice <- log(price0) + cumsum(r)
Prices <- exp(logPrice)
plot(Prices, type="l")
library(ggplot2)
# initial price
price0 <- 1000
# annual drift and volatility
mu <- .1
sigma <- .20
t <- 250
mu.daily <- mu/t
sigma.daily <- simga/sqrt(t)
r <- rnorm(100, mu.daily, simga.daily)
logPrice <- log(price0) + cumsum(r)
Prices <- exp(logPrice)
plot(Prices, type="l")
plot(Prices, type="l")
mu <- 0
sigma <- .20
t <- 250
mu.daily <- mu/t
sigma.daily <- simga/sqrt(t)
r <- rnorm(100, mu.daily, simga.daily)
logPrice <- log(price0) + cumsum(r)
Prices <- exp(logPrice)
plot(Prices, type="l")
library(ggplot2)
# initial price
price0 <- 1000
# annual drift and volatility
mu <- 0
sigma <- .20
days <- 250
mu.daily <- mu/days
sigma.daily <- simga/sqrt(days)
r <- rnorm(100, mu.daily, simga.daily)
logPrice <- log(price0) + cumsum(r)
Prices <- exp(logPrice)
plot(Prices, type="l")
mu.daily <- mu/days
mu.daily
mu <- .1
mu.daily
mu.daily <- mu/days
mu.daily
r <- rnorm(100, mu.daily, simga.daily)
library(ggplot2)
# initial price
price0 <- 1000
# annual drift and volatility
mu <- .1
sigma <- .20
days <- 250
mu.daily <- mu/days
sigma.daily <- simga/sqrt(days)
r <- rnorm(100, mu.daily, sigma.daily)
logPrice <- log(price0) + cumsum(r)
Prices <- exp(logPrice)
plot(Prices, type="l")
library(ggplot2)
# initial price
price0 <- 1000
# annual drift and volatility
mu <- .1
sigma <- .20
days <- 250
mu.daily <- mu/days
sigma.daily <- simga/sqrt(days)
r <- rnorm(100, mu.daily, sigma.daily)
logPrice <- log(price0) + cumsum(r)
Prices <- exp(logPrice)
plot(Prices, type="l")
r <- rnorm(100, mu.daily, sigma.daily)
sigma.daily <- simga/sqrt(days)
library(ggplot2)
# initial price
price0 <- 1000
# annual drift and volatility
mu <- .1
sigma <- .20
days <- 250
mu.daily <- mu/days
sigma.daily <- sigma/sqrt(days)
r <- rnorm(100, mu.daily, sigma.daily)
logPrice <- log(price0) + cumsum(r)
Prices <- exp(logPrice)
plot(Prices, type="l")
library(ggplot2)
# initial price
price0 <- 1000
# annual drift and volatility
mu <- .1
sigma <- .20
days <- 250
mu.daily <- mu/days
sigma.daily <- sigma/sqrt(days)
r <- rnorm(100, mu.daily, sigma.daily)
logPrice <- log(price0) + cumsum(r)
Prices <- exp(logPrice)
plot(Prices, type="l")
# initial price
p0 <- 1000
# annual drift and volatility
mu <- .1
sigma <- .20
days <- 250
mu.daily <- mu/days
sigma.daily <- sigma/sqrt(days)
r <- rnorm(100, mu.daily, sigma.daily)
logPrice <- log(p0) + cumsum(r)
Prices <- exp(logPrice)
plot(Prices, type="l")
# initial price
p0 <- 1000
# annual drift and volatility
mu <- .1
sigma <- .20
days <- 250
mu.daily <- mu/days
sigma.daily <- sigma/sqrt(days)
r <- rnorm(100, mu.daily, sigma.daily)
logPrice <- log(p0) + cumsum(r)
Prices <- exp(logPrice)
plot(Prices, type="l")
?rnorm
rnorm(100, mu.daily, sigma.daily)
?cumsum
cumsum(1:10)
# initial price
p0 <- 1000
# annual drift and volatility
mu <- .1
sigma <- .20
# daily drift and volatility
days <- 250
mu.daily <- mu/days
sigma.daily <- sigma/sqrt(days)
r <- rnorm(100, mu.daily, sigma.daily) # 100 random normals
logPrice <- log(p0) + cumsum(r) # Returns a vector whose elements are the
# cumulative sums of the elements of the argument.
Prices <- exp(logPrice)
plot(Prices, type="l")
setwd("C:/Users/David/Videos/2014/oct2014/100414_random_walk")
png(file="random_walk.png")
plot(Prices, type="l")
dev.off()
mu <- .1
sigma <- .20
# daily drift and volatility
days <- 250
mu.daily <- mu/days
sigma.daily <- sigma/sqrt(days)
r <- rnorm(100, mu.daily, sigma.daily) # 100 random normals
logPrice <- log(p0) + cumsum(r) # Returns a vector whose elements are the
# cumulative sums of the elements of the argument.
Prices <- exp(logPrice)
png(file="random_walk.png")
plot(Prices, type="l")
dev.off()
source("randomwalk.R")
randomwalk()
list()
source("randomwalk.R")
randomwalk()
source("randomwak.R")
source("randomwalk.R")
dir.list()
list.dir()
source("rwalk.R")
rwalk(.1,.3)
source("rwalk.R")
rwalk(.1,.3)
rwalk(.1,.3)
rwalk(.1,.3)
rwalk(.1,.3)
rwalk(.1,.3)
rwalk(.1,.3)
rwalk(.1,.3)
source("rwalk.R")
rwalk(.1,.3)
rwalk(.1,.3)
rwalk(.1,.3)
rwalk(.1,.3)
rwalk(.1,.3)
rwalk(.1,.3)
source("rwalk.R")
rwalk(.1,.3)
rwalk(.1,.3)
source("rwalk.R")
rwalk(.1,.3)
rwalk(.1,.3)
rwalk(.1,.3)
rwalk(.1,.3)
